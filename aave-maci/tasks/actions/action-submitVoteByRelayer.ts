import { task, types } from "@nomiclabs/buidler/config";
import {
  setBRE,
  submitVoteByRelayer,
  getAaveProtoGovernance
} from "../../helpers/helpers";
import { eVote } from "../../helpers/types";
import {
  getHashAndSignatureFromVoteParams,
  isSignatureValid
} from "../../helpers/tx-util";
import { expect } from "chai";
import { ContractReceipt } from "ethers/contract";

task(
  `action-submitVoteByRelayer`,
  `Submits a vote to a proposal through a relayer`
)
  .addParam("proposalId", "Numeric ID of the proposal", null, types.int)
  .addParam("vote", "0 (abstain), 1 (yes), 2 (no)", null, types.int)
  .addParam(
    "votingAsset",
    "The address of the voting asset",
    null,
    types.string
  )
  .addParam(
    "voter",
    "The Signer object of the voter address who is going to sign the vote",
    null,
    types.json
  )
  .addParam(
    "relayer",
    "The Signer object of the relayer which submits the transaction",
    null,
    types.json
  )
  .addParam("hashedParams", "Hash of the voting parameters", null, types.string)
  .addParam(
    "signature",
    "The signature generated by the voter of the vote params to submit by the relayer",
    null,
    types.string
  )
  .addParam(
    "nonce",
    "The nonce to use in the signature process",
    null,
    types.string
  )
  .setAction(
    async (
      {
        proposalId,
        vote,
        votingAsset,
        voter,
        relayer,
        signature: signatureParam,
        hashedParams: hashedParamsParam,
        nonce: nonceParam
      },
      BRE
    ) => {
      setBRE(BRE);

      const voterAddress = await voter.getAddress();
      const aaveProtoGovernance = await getAaveProtoGovernance();
      const calculatedNonce =
        (
          await aaveProtoGovernance.getVoterData(proposalId, voterAddress)
        )[3].toNumber() + 1;
      const nonce = parseInt(nonceParam) || calculatedNonce;
      const {
        hashedParams: calculatedHashedParams,
        arrayifiedHashedParams,
        signature: calculatedSignature
      } = await getHashAndSignatureFromVoteParams(
        {
          proposalId,
          vote,
          voter: voterAddress,
          votingAsset,
          nonce
        },
        voter
      );

      expect(
        isSignatureValid(
          arrayifiedHashedParams,
          calculatedSignature,
          voterAddress
        ),
        `INVALID SIGNATURE`
      ).to.be.true;

      const signature = signatureParam || calculatedSignature;
      const hashedParams = hashedParamsParam || calculatedHashedParams;

      const res: ContractReceipt[] = [] as ContractReceipt[];
      res.push(
        await (
          await submitVoteByRelayer(
            proposalId,
            <eVote>vote,
            voterAddress,
            votingAsset,
            signature,
            hashedParams,
            relayer,
            nonce
          )
        ).wait()
      );
      return res;
    }
  );
